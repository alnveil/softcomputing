
import matplotlib
matplotlib.use("Agg")

from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras.preprocessing.image import img_to_array
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from pyimagesearch.smallervggnet import SmallerVGGNet
import matplotlib.pyplot as plt
from imutils import paths
import numpy as np
import argparse
import random
import pickle
import cv2
import os
import keras_metrics

import tensorflow as tf




ap = argparse.ArgumentParser()
ap.add_argument("-d", "--dataset", required=True,
	help="path to input dataset (i.e., directory of images)")
ap.add_argument("-m", "--model", required=True,
	help="path to output model")
ap.add_argument("-l", "--labelbin", required=True,
	help="path to output label binarizer")
ap.add_argument("-p", "--plot", type=str, default="plot.png",
	help="path to output accuracy/loss plot")
args = vars(ap.parse_args())


EPOCHS = 100
learn_rate = 1e-3
batch_size = 32
Dimensi = (96, 96, 3)

data = []
labels = []


print("[INFO] loading images...")
dir = sorted(list(paths.list_images(args["dataset"])))
random.seed(42)
random.shuffle(dir)


for imagePath in dir:

	image = cv2.imread(imagePath)
	image = cv2.resize(image, (Dimensi[1], Dimensi[0]))
	image = img_to_array(image)
	data.append(image)
 

	label = imagePath.split(os.path.sep)[-2]

	labels.append(label)


data = np.array(data, dtype="float") / 255.0
labels = np.array(labels)
print("[Informasi] ukuran data matrix: {:.2f}MB".format(
	data.nbytes / (1024 * 1000.0)))


lb = LabelBinarizer()
labels = lb.fit_transform(labels)


(trainX, testX, trainY, testY) = train_test_split(data,
	labels, test_size=0.2, random_state=42)


aug = ImageDataGenerator(rotation_range=25, width_shift_range=0.1,
	height_shift_range=0.1, shear_range=0.2, zoom_range=0.2,
	horizontal_flip=True, fill_mode="nearest")


print("[informasi] menyiapkan pelatihan...")
model = SmallerVGGNet.build(width=Dimensi[1], height=Dimensi[0],
	depth=Dimensi[2], classes=len(lb.classes_))
opt = Adam(lr=learn_rate, decay=learn_rate / EPOCHS)
model.compile(loss="categorical_crossentropy", optimizer=opt,
	metrics=["accuracy"])


print("[informasi] mulai pelatihan...")
latih = model.fit_generator(
	aug.flow(trainX, trainY, batch_size=batch_size),
	validation_data=(testX, testY),
	steps_per_epoch=len(trainX) // batch_size,
	epochs=EPOCHS, verbose=1)


print("[informasi] menyimpan model...")
model.save(args["model"])


print("[informasi] serializing label binarizer...")
file = open(args["labelbin"], "wb")
file.write(pickle.dumps(lb))
file.close()


plt.style.use("ggplot")
plt.figure()
N = EPOCHS

plt.plot(np.arange(0, N), latih.history["acc"], label="train_acc")
plt.plot(np.arange(0, N), latih.history["val_acc"], label="val_acc")
plt.plot(np.arange(0, N), latih.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), latih.history["val_loss"], label="val_loss")
plt.title("Training Loss and Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend(loc="upper left")
plt.savefig(args["plot"])
